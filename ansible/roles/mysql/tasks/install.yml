---
# Retrieve the current hostname, because {{ ansible_hostname }} still contains the old name
- shell: hostname
  register: current_hostname

- name: Add MySQL 8 ubuntu bionic repository key
  become: yes
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 5072E1F5
  when: mysql.version == "8.0"

- name: Add MySQL 8 ubuntu bionic repository
  become: yes
  apt_repository:
    repo: "deb http://repo.mysql.com/apt/ubuntu bionic mysql-8.0"
    state: present
  when: mysql.version == "8.0"

- name: Install MySQL Packages
  become: yes
  apt:
    name: "{{ packages }}"
    state: latest
    update_cache: yes
  vars:
    packages:
      - mysql-server
      - mysql-client
      - python-mysqldb
  register: mysql_installation_result

- name: Ensure MySQL service running
  become: yes
  service: name=mysql state=started enabled=yes

- name: Set root user password
  become: yes
  # If .my.cnf already exists, this will cause an mysql-root-password update.
  mysql_user:
    name: root
    password: "{{ mysql.root_password}}"
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create .my.cnf for vagrant
  become: yes
  template:
    src: "{{role_path}}/files/client.my.cnf.j2"
    dest: "{{ansible_env.HOME}}/.my.cnf"
    owner: vagrant
    group: vagrant
    mode: 0600

- name: Create .my.cnf for root
  become: yes
  template:
    src: "{{role_path}}/files/client.my.cnf.j2"
    dest: "/root/.my.cnf"
    owner: root
    group: root
    mode: 0600

- name: Create oxid.cnf
  become: yes
  template:
    src: "{{role_path}}/files/oxid.cnf.j2"
    dest: "/etc/mysql/conf.d/oxid.cnf"
    owner: root
    group: root
    mode: 0644
    force: yes
  when: mysql.sql_mode
  notify: restart mysql

- name: Create databases
  mysql_db: name={{ mysql.database }} state=present login_user=root login_password={{ mysql.root_password }}

- name: Import dump
  mysql_db: name={{ mysql.database }} state=import login_user=root login_password={{ mysql.root_password }} target=/vagrant/{{ mysql.dump }}
  when: mysql.dump
  register: mysql_dump_imported

- name: Ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent login_user=root login_password={{ mysql.root_password }}
  with_items:
    - localhost
    - "{{ current_hostname.stdout | lower }}"

- name: Create users
  mysql_user:
    name: "{{ mysql.user }}"
    password: "{{ mysql.password }}"
    priv: "{{ mysql.grants }}"
    login_user: root
    login_password: "{{ mysql.root_password }}"
    state: present

- name: Transfer mysql to in memory storage
  include: in_memory.yml
  when: mysql.in_memory
